/*
 * Copyright (c) 2024-2025 Snowflake Computing Inc. All rights reserved.
 */

package net.snowflake.ingest.streaming.internal;

import com.google.common.annotations.VisibleForTesting;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Interface to manage {@link InternalStage} and {@link PresignedUrlExternalVolume} for {@link
 * FlushService}
 */
@VisibleForTesting
public interface IStorageManager {

  /** Default max upload retries for streaming ingest storage */
  int DEFAULT_MAX_UPLOAD_RETRIES = 5;

  /**
   * Given a fully qualified table name, return the target storage
   *
   * @param fullyQualifiedTableName the target fully qualified table name
   * @return target stage
   */
  // TODO: Use TableRef everywhere instead of constructing strings and passing them around
  // everywhere
  IStorage getStorage(String fullyQualifiedTableName);

  /** Informs the storage manager about a new table that's being ingested into by the client. */
  void registerTable(TableRef tableRef);

  /**
   * Generate a unique blob path and increment the blob sequencer
   *
   * @param fullyQualifiedTableName The table for which the path must be generated
   * @param pathOverride The path override. If provided, it will be used instead of the path in the
   *     metadata of the volume. Only used for Iceberg.
   * @return the blob path
   */
  // TODO: Use TableRef everywhere instead of constructing strings and passing them around
  // everywhere
  BlobPath generateBlobPath(String fullyQualifiedTableName, @Nullable String pathOverride);

  /**
   * Get the unique client prefix generated by the Snowflake server
   *
   * @return the client prefix
   */
  String getClientPrefix();

  /**
   * Get the updated subscoped tokens and location info for this table
   *
   * @param tableRef The table for which to get the location
   * @param fileName Legacy, was used by deprecated GCS codepaths when it didn't support subscoped
   *     tokens. Not in use.
   * @return
   */
  FileLocationInfo getRefreshedLocation(TableRef tableRef, Optional<String> fileName);

  /**
   * Get the number of times generateBlobPath has been called, this is used for testing.
   *
   * @return the current counter value indicating how many blob paths have been generated
   */
  long getGenerateBlobPathCount();
}
